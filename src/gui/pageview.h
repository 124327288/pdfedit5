#ifndef __PAGEVIEW_H__
#define __PAGEVIEW_H__

#include <qlabel.h>
#include <qevent.h>
#include <qpainter.h>
#include <qcursor.h>

namespace gui {

/** QWidget's class for viewing a page.
 *  
 */
class PageView : public QLabel {
	Q_OBJECT
	public:
		/** Enum type for setting selection mode.
		 * RectSelection	 =  the selected area will be bounded thin rectangle
		 * FillRectSelection	 =  the selected area will be filled rectangle
		 * RectFillRectSelection =  moving or creating selected area -> FillRectSelection
		 * 			 =  otherwise -> RectSelection
		 * FillRectRectSelection =  moving or creating selected area -> RectSelection
		 * 			 =  otherwise -> FillRectSelection
		 */
		enum SelectionMode { RectSelection, FillRectSelection, RectFillRectSelection, FillRectRectSelection };

		/** Default constructor of pageView.
		 * @param parent widget containing this control
		 *
		 * It sets 
		 *	selection mode to FillRectRectSelection
		 **/
		PageView (QWidget *parent);
		/** Deconstructor of pageView.
		 */
		virtual ~PageView ();
		/** Method for escape from creating or moving selected area.
		 *
		 * @return  if was terminated creating or moving process, return true
		 */
		bool escapeSelection ();	// return true if escaped from selection or moving mode
	signals:
		/** Signal generated by selection process after the selected area
		 * @param  the selected area
		 */
		void leftClicked ( const QRect & );
		/** Signal generated by mouse right release event
		 * @param  page position of mouse right release event
		 * @param  contains rectangle of the selected area on the page (if mouse event is out of selected area 
		 * 	on the page, than parameter will be NULL)
		 */
		void rightClicked ( const QPoint &, const QRect * );
		/** Signal generated by selection process after move the selected area
		 * @param  left top position of moved selected area on the page
		 */
		void selectionMovedTo ( const QPoint & );		// top left
		/** Signal generated by selection process after resize the selected area
		 * @param  old selected rectangle
		 * @param  new selected rectangle
		 */
		void selectionResized( const QRect &, const QRect & );
		/** Signal generated by moving process after move cursor
		 * @param  new position of the cursor
		 */
		void changeMousePosition( const QPoint & );
        protected:
		/** Method for process mouse press events (see QWidget's method).
		 * @param  press event
		 *
		 * Start creating or moving process with selected area.
		 */
		virtual void mousePressEvent ( QMouseEvent * e );
		/** Method for process mouse release events (see QWidget's method).
		 * @param  release event
		 *
		 * Finish creating or moving process with selected area.
		 *   ( emits leftClicked, rightClicked, selectionMovedTo signals )
		 */
		virtual void mouseReleaseEvent ( QMouseEvent * e );

//		virtual void mouseDoubleClickEvent ( QMouseEvent * e );

		/** Method for process mouse move events (see QWidget's method).
		 * @param  move event
		 *
		 * If is started creating or moving process, process changes.
		 */
		virtual void mouseMoveEvent ( QMouseEvent * e );
	public slots:
		/** Method set selection mode.
		 * @param selection mode (see 'enum SelectionMode')
		 *
		 * Selection mode is dafault sets to FillRectRectSelection .
		 */
		void setSelectionMode ( enum SelectionMode m );		// default FillRectRectSelection
		/** Method set selected area.
		 * @param rectangle to select area on page
		 */
		void setSelectedRect ( QRect & newRect );
		/** Method unset selected area
		 */
		void unSelect ( );
		/** Method set pixmap image of page.
		 * @param image of page as QPixmap
		 */
		virtual void setPixmap ( const QPixmap & qp );
		/** Method set width of resizing zone
		 * @param width in pixels
		 *
		 * Default is set to 2.
		 */
		void setResizingZone ( unsigned int width );
		/** Method save image to file
		 * @param output file name
		 * @param format output file (see QImageIO::outputFormats()
		 * @param quality factor must be in the range [0,100] or -1. Specify 0 to obtain small compressed files.
		 * @param specify TRUE to save only selected area, or FALSE to save all page
		 *
		 * @return  returns TRUE if successful; otherwise FALSE
		 */
		bool saveImage ( const QString & file, const char * format, int quality = -1, bool onlySelectedArea = false);
	private:
		/** enum of resizing parts */
		enum resizingParts	{ none = 0, left = 1, right = 2, top = 4, bottom = 8 };
		/** Method for calculation resizing mode
		 * @param rectsngle for resizing
		 * @param cursor position
		 * 
		 * @return combination of enum resizingParts
		 */
		int theNeerestResizingMode ( QRect *, const QPoint & );
		/** enum of selection variant
		 * 	KeepSelection	= kepp actual selection variant 
		 */
		enum SelectionSet { KeepSelection, IsSelected, IsSelecting };
		/** Method for change selection variant
		 * @param selection variant (see enum SelectionSet)
		 */
		void changeSelection ( enum SelectionSet );
		/** Method for undraw selected area on the page
		 */
		void unDrawSelection ( void );
		/** Method for draw rectangle on page.
		 * @param rectangle to draw
		 * @param if rectangle have been draw or undraw
		 *
		 * See also: changeSelection, setSelectionMode.
		 */
		void drawRect ( QRect * newRect, bool unDraw = false );
		/** Method for undraw old rectangle and draw new rectangle on page.
		 * @param old rectangle to undraw
		 * @param new rectangle to draw
		 * @param selection variant to draw new rectangle
		 */
		void drawRect ( QRect * oldRect, QRect * newRect, enum SelectionSet ss = KeepSelection );
		/** Method for redraw old rectangle to new rectangle on page.
		 * @param old rectangle to undraw
		 * @param point of right bottom point of new rectangle to draw (left top point is same as have old rectangle)
		 */
		void drawRect ( QRect * oldRect, const QPoint & toPoint );
	private:
		/** original page image */
		QPixmap * pageImage;

		/** temporary selected area */
		QRect * mouseRectSelected;	// when rectSelected is not NULL than mouseRectSelected is not NULL
		/** selected area  ( must be normalized rectangle ) */
		QRect * rectSelected;
		/** selected area  ( must be normalized rectangle ) */
		QRect * oldRectSelected;
		/** is true if selected area is moving or creating new */
		bool	isPress;
		/** is true if selected area is moving */
		bool	isMoving;
		/** is true if selected area is resizing */
		bool	isResizing;
		/** is true if is set 'IsSelecting' selection variant */
		bool	quickSelection;
		/** selection mode which is set */
		enum SelectionMode selectionMode;
		/** moving mode - point is relative position mouse cursor from left top selected rectangle which is moving
		 *  resizing mode - point is right bottom position of selected area befor the area was resizing
		 */
		QPoint	pointInRect;
		/** aktual mouse position */
		QPoint	mousePos;
		/** coefficient of X and Y in resizing (is eq. 0 or 1) */
		int	resizeCoefficientX,
			resizeCoefficientY;
		/** mapping array resizing mode to cursor shape */
		int mappingResizingModeToCursor [16];
		/** is combination of enum resizingParts */
		int cursorIsSetTo;
		/** width of resizing zone */
		int resizingCursorZone;
};

} // namespace gui

#endif
