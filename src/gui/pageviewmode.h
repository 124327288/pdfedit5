#ifndef __PAGEVIEWMODE_H__
#define __PAGEVIEWMODE_H__

#include <qpainter.h>
#include <qevent.h>
#include <qwidget.h>
#include <vector>
#include "pdfoperators.h"
#include "rect2Darray.h"


using namespace pdfobjects;

namespace gui {

//  ---------------------   drawing objects  ----------------- //
class DrawingObject;

class DrawingObjectFactory {
	public:
			static DrawingObject * create( const QString & nameOfObject );
};

class DrawingObject {
	public:
			virtual void drawObject ( QPainter & painter, QPoint p1, QPoint p2 );
			virtual void drawObject ( QPainter & painter, QRegion reg );
			virtual void drawObject ( QPainter & painter, QRect rect );
};

class DrawingLine: public DrawingObject {
	public:
			DrawingLine ();
			virtual ~DrawingLine ();

			virtual void drawObject ( QPainter & painter, QPoint p1, QPoint p2 );

	private:
			QPen	pen;
};

class DrawingRect: public DrawingObject {
	public:
			DrawingRect ();
			virtual ~DrawingRect ();

			virtual void drawObject ( QPainter & painter, QPoint p1, QPoint p2 );

	private:
			QPen	pen;
};
//  ---------------------  selection mode  --------------------- //
class PageViewMode;

class PageViewModeFactory {
	public:
			static PageViewMode * create(	const QString & nameOfMode,
											const QString & drawingObject,
											const QString & scriptFncAtMouseRelease );
};

class PageViewMode: public QObject {
	Q_OBJECT
	signals:
			/** Signal generated by new selection known objects
			 * @param  objects Objects which are selected.
			 */
			void newSelectedOperators( const std::vector< boost::shared_ptr< PdfOperator > > & objects );

			void needRepaint ( );
			void popupMenu ( const QPoint & PagePos /*, Cobject & */ );
			void executeCommand ( QString cmd );
	public slots:
			virtual void movedSelectedObjects ( QPoint relativeMove );
			virtual void resizedSelectedObjects ( int dleft, int dtop, int dright, int dbottom );

			virtual void moveSelectedObjects ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void movedSelectedObjects ( QMouseEvent * e, QPainter & p, QWidget * w );

			virtual void resizeSelectedObjects ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void resizedSelectedObjects ( QMouseEvent * e, QPainter & p, QWidget * w );

			/* mouse press (and coresponding release) events not above selection area */
			virtual void mousePressLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseReleaseLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mousePressRightButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseReleaseRightButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mousePressMidButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseReleaseMidButton ( QMouseEvent * e, QPainter & p, QWidget * w );

			virtual void mouseMoveWithPressedLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );

			virtual void mousePressEvent ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseReleaseEvent ( QMouseEvent * e, QPainter & p, QWidget * w  );
			virtual void mouseDoubleClickEvent ( QMouseEvent * e, QPainter & p, QWidget * w  );
			virtual void mouseMoveEvent ( QMouseEvent * e, QPainter & p, QWidget * w  );
			virtual void wheelEvent ( QWheelEvent * e, QPainter & p, QWidget * w  );

			virtual void keyPressEvent ( QKeyEvent * e, QPainter & p, QWidget * w  );
			virtual void keyReleaseEvent ( QKeyEvent * e, QPainter & p, QWidget * w  );

			virtual void focusInEvent ( QFocusEvent *, QPainter & p, QWidget * w  );
			virtual void focusOutEvent ( QFocusEvent *, QPainter & p, QWidget * w  );

			virtual void repaint ( QPainter & p, QWidget * w  );

			virtual QRegion getSelectedRegion ();
			virtual void setSelectedRegion ( QRegion r );

			virtual void setWorkOperators ( const std::vector< boost::shared_ptr< PdfOperator > > & wOps );
			virtual void addWorkOperators ( const std::vector< boost::shared_ptr< PdfOperator > > & wOps );
			virtual void clearWorkOperators ();
			virtual void clearSelectedOperators ();
			virtual void setSelectedOperators ( const std::vector< boost::shared_ptr< PdfOperator > > & sOps );
			virtual void addSelectedOperators ( const std::vector< boost::shared_ptr< PdfOperator > > & sOps );
			virtual void actualizeSelection ();
	public:
			/** Function return if some object is selected (not in selection mode PageView::SelectRect)
			 * @return Return TRUE, if some object is selected. Otherwise return FALSE.
			 */
			virtual bool isSomeoneSelected ();

			/** Method set width of resizing zone
			 * @param width width in pixels
			 *
			 * Default is set to 2.
			 */
			void setResizingZone ( unsigned int width);

			PageViewMode( const QString & drawingObject, const QString & _scriptFncAtMouseRelease );

			virtual ~PageViewMode();
	protected:
			/** enum of resizing parts */
			enum resizingParts	{ none = 0, left = 1, right = 2, top = 4, bottom = 8, onUnselectedObject = 16 };
			/** Set mapping cursors for viewing on the page for actual selection mode */
			virtual void setMappingCursor();

			/** Method for calculation resizing mode
			 * @param r rectsngle for resizing
			 * @param p cursor position
			 * 
			 * @return combination of enum resizingParts
			 */
			virtual int	theNeerestResizingMode ( const QRegion & r, const QPoint & p );

			void addOpsBBoxToRegion ( QRegion & r, const std::vector< boost::shared_ptr< PdfOperator > > & ops );
			QRect getBBox( const boost::shared_ptr<PdfOperator> & op ) const;
	protected:
			std::vector< boost::shared_ptr< PdfOperator > >		workOperators;
			std::vector< boost::shared_ptr< PdfOperator > >		selectedOperators;

			QRegion		workOpRegion;
			QRegion		selectedOpRegion;

			QRegion		mouseSelectedRegion;
			QPoint		pressPosition,
						releasePosition;
			QPoint		pointInRect;
			int			resizeCoefficientX;
			int			resizeCoefficientY;

			bool		isPressedLeftButton;
			bool		isMoving;
			bool		isResizing;

			boost::shared_ptr< DrawingObject >			drawingObject;

			/** width of resizing zone */
			int resizingZone;
			/** mapping array resizing mode to cursor shape */
			int mappingResizingModeToCursor [17];

			/** Name of script function, which will call at mouse release.
			 * Must be in this format:
			 * 		"fncName ( %1, %2, %3, %4 )"
			 * where
			 * 		%1	will be replaced with x1 (X position at mouse press)
			 * 		%2	will be replaced with y1 (Y position at mouse press)
			 * 		%3	will be replaced with x2 (X position at mouse release)
			 * 		%4	will be replaced with y2 (Y position at mouse release)
			 *
			 * @see QString::arg
			 * 
			 * Function in script:
			 * 			fncName ( x1:Number, y1:Number, x2:Number, y2:Number )  { ... }
			 */
			QString scriptFncAtMouseRelease;
			/** Name of script function, which will call at move selected objects.
			 * Must be in this format:
			 * 		"fncName ( %1, %2 )"
			 * where
			 * 		%1	will be replaced with dx
			 * 		%2	will be replaced with dy
			 *
			 * @see QString::arg
			 * 
			 * Function in script:
			 * 			fncName ( dx:Number, dy:Number )  { ... }
			 */
			QString scriptFncAtMoveSelectedObjects;
			/** Name of script function, which will call at resized selected objects.
			 * Must be in this format:
			 * 		"fncName ( %1, %2, %3, %4 )"
			 * where
			 * 		%1	will be replaced with dleft
			 * 		%2	will be replaced with dtop
			 * 		%3	will be replaced with dright
			 * 		%4	will be replaced with dbottom
			 *
			 * @see QString::arg
			 * 
			 * Function in script:
			 * 			fncName ( dleft:Number, dtop:Number, dright:Number, dbottom:Number )  { ... }
			 *
			 */
			QString scriptFncAtResizeSelectedObjects;
};

class PageViewMode_NewObject: public PageViewMode {
	Q_OBJECT
	public slots:
			virtual void mousePressLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseReleaseLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseMoveWithPressedLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );

			virtual void repaint ( QPainter & p, QWidget * w  );
	public:
			PageViewMode_NewObject ( const QString & drawingObject, const QString & _scriptFncAtMouseRelease );
};

class PageViewMode_TextSelection: public PageViewMode {
	Q_OBJECT
	public slots:
			virtual void mousePressLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseReleaseLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );
			virtual void mouseMoveWithPressedLeftButton ( QMouseEvent * e, QPainter & p, QWidget * w );

			virtual void repaint ( QPainter & p, QWidget * w  );

			virtual void setSelectedRegion ( QRegion r );

			virtual void clearWorkOperators ();
			virtual void clearSelectedOperators ();
			virtual void addWorkOperators ( const std::vector< boost::shared_ptr< PdfOperator > > & wOps );
			virtual void addSelectedOperators ( const std::vector< boost::shared_ptr< PdfOperator > > & sOps );
	public:
			PageViewMode_TextSelection ( const QString & drawingObject, const QString & _scriptFncAtMouseRelease );
	protected:
			/** Set mapping cursors for viewing on the page for actual selection mode */
			virtual void setMappingCursor();

			void updateSelection (	const BBoxOfObjectOnPage< boost::shared_ptr<PdfOperator> > *	first,
									const BBoxOfObjectOnPage< boost::shared_ptr<PdfOperator> > *	last,
									QRegion *														selOpsRegion = NULL,
									std::vector< boost::shared_ptr< PdfOperator > > *				selOps = NULL );

			const BBoxOfObjectOnPage< boost::shared_ptr<PdfOperator> >	* getNearestObject( const QPoint & point );
	protected:
			/** 2D array of bboxes objects for special selection */
			Rect2DArray< boost::shared_ptr<PdfOperator> >	arrayOfBBoxes;
			/** first selected objects */
			const BBoxOfObjectOnPage< boost::shared_ptr<PdfOperator> >	* firstSelectedObject;
			/** last selected objects */
			const BBoxOfObjectOnPage< boost::shared_ptr<PdfOperator> >	* lastSelectedObject;
};

} // namespace gui

#endif
