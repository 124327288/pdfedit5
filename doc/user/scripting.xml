<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
 <bookinfo>
  <title>Documentation for Scripting</title>
 </bookinfo>

 <chapter>
  <title>Scripting in PDFEditor</title>
  <para>
   PDFEditor have support for scripting. Evey item in menu (or toolbar) runs a script
   (mostly just short call of function, but using complex scripts form menu
   is possible), and also user can type script commands directly into
   commandline. Every invocation of script from menu will echo the command
   to the commandline, so user can learn how to do things in menu directly
   from commandline if he wants.
  </para>
  <para>
   QSA is used for scripting, which is based on ECMAScript standard
   (if you don't know what ECMAScript is, it is basically the same
    syntax as JavaScript)
  </para>
  <para>
   When new editor window is launched (but before the document is loaded or created),
   file <filename>init.qs</filename> is run. This file should contain declaration of all
   functions used in toolbars or menus and may also contain any startup code to be run
   before loading or creating new document.
  </para>
  <para>
   This documentation will not explain the language syntax, but will document
   all functions and objects that are exported from the application to the
   scripting engine so they may be used in scripts and menus.
  </para>
 </chapter>
 <chapter>
  <title>Static functions</title>
  <para>
   <title><funcsynopsys>void about()</funcsynopsys></title>
   Invokes "About" dialog
  </para>
  <para>
   <title><funcsynopsys>void createNewWindow()</funcsynopsys></title>
   Creates new empty editor window
  </para>
  <para>
   <title><funcsynopsys>void exitApp()</funcsynopsys></title>
   Terminates application
  </para>
  <para>
   <title><funcsynopsys>void closeWindow()</funcsynopsys></title>
   Closes current editor window
  </para>
  <para>
   <title><funcsynopsys>void print(String)</funcsynopsys></title>
   Outputs given string to command window, followed by newline.
   Useful to output various debugging or status messages
  </para>
  <para>
   <title><funcsynopsys>void objects()</funcsynopsys></title>
   Debugging function usable by script developers.
   Print all objects that are in current script interpreter to command window
  </para>
  <para>
   <title><funcsynopsys>void functions()</funcsynopsys></title>
   Debugging function usable by script developers.
   Print all functions that are in current script interpreter to command window
  </para>
  <para>
   <title><funcsynopsys>void variables()</funcsynopsys></title>
   Debugging function usable by script developers.
   Print all variables that are in current script interpreter to command window
  </para>
  <para>
   <title><funcsynopsys> void saveWindowState();</funcsynopsys></title>
   Save state of current editor window (size and position of window and size of elements inside it)
   State is saved to editor's configuration file.
  </para>
  <para>
   <title><funcsynopsys> void restoreWindowState();</funcsynopsys></title>
   Restore state of current editor window (size and position of window and size of elements inside it)
   State is restored frmo state saved in editor's configuration file.   
  </para>
 </chapter>
 <chapter>
  <title>Objects exported to scripting</title>
  <sect1>
   <title>settings</title>
   <para>
    This object hold application settings and can be used to read them.
   <para>
   <title><funcsynopsys>String settings.read(String)</funcsynopsys></title>
   Returns application setting with given key
   </para>
   </para>
  </sect1>
 </chapter>
</book>
