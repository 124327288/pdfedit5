<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
 <bookinfo>
  <title>Documentation for PDF Editor - Scripting</title>
 </bookinfo>
 <chapter>
  <title>Scripting in PDFEditor</title>
  <para>
   PDFEditor have support for scripting. Evey item in menu (or toolbar) runs a script
   (mostly just short call of function, but using complex scripts form menu
   is possible), and also user can type script commands directly into
   commandline. Every invocation of script from menu will echo the command
   to the commandline, so user can learn how to do things in menu directly
   from commandline if he wants.
  </para>
  <para>
   QSA is used for scripting, which is based on ECMAScript standard
   (if you don't know what ECMAScript is, it is basically the same
    syntax as JavaScript)
  </para>
  <para>
   When new editor window is launched (but before the document is loaded or created),
   file <filename>init.qs</filename><footnote>This can be changed to different filename in settings</footnote> is run. This file should contain declaration of all
   functions used in toolbars or menus and may also contain any startup code to be run
   before loading or creating new document.
  </para>
  <para>
   This documentation will not explain the language syntax, but will document
   all functions and objects that are exported from the application to the
   scripting engine so they may be used in scripts and menus.
  </para>
  <para>
   <note>Scripts are not "secure" by design, as the API contain functions to read or write
   arbitrary files and directories and to execute external processes.
   See http://doc.trolltech.com/qsa-1.1.4/extensions-2.html for description
   of File, Dir and Process classes, which are available to script.</note>
  </para>
 </chapter>
 <chapter>
  <title>Static functions</title>
  <sect1 id="about">
   <title><funcsynopsis>void about()</funcsynopsis></title>
   Invokes "About" dialog, showing information about this program and its authors
  </sect1>
  <sect1 id="help">
   <title><funcsynopsis>void help(string topic)</funcsynopsis></title>
   Invokes program help. Optional parameter is topic - if invalid or not defined, help title page will be invoked
  </sect1>
  <sect1 id="run">
   <title><funcsynopsis>void run(string filename)</funcsynopsis></title>
   Loads and runs script from given filename.
  </sect1>
  <sect1 id="setDebugLevel">
   <title><funcsynopsis>void setDebugLevel(string level)</funcsynopsis></title>
   Set new debugging verbosity level. Accept same parameter as -d option on commandline
  (either number or symbolic constant)
  </sect1>
  <sect1 id="options">
   <title><funcsynopsis>void options()</funcsynopsis></title>
   Invokes options dialog. Does not wait for dialog to finish.
  </sect1>
  <sect1 id="addObjectDialog">
   <title><funcsynopsis>void addObjectDialog(IProperty container)</funcsynopsis></title>
   Invokes dialog for adding additional objects to specified container (which must be <link linkend="type_Dict">Dictionary</link> or <link linkend="type_Array">Array</link>).
   After invoking dialog, this function returns immediately and the dialog is left for the user to use.
   If given object is not specified, curently selected object in property editor is used.
   If the object is not <link linkend="type_Dict">Dictionary</link> or <link linkend="type_Array">Array</link>, no dialog is shown.
  </sect1>
  <sect1 id="createNewWindow">
   <title><funcsynopsis>void createNewWindow()</funcsynopsis></title>
   Creates new editor window with empty document in it.
  </sect1>
  <sect1 id="message">
   <title><funcsynopsis>void message(string)</funcsynopsis></title>
   Show simple messagebox with given message and wait until user dismiss it
  </sect1>
  <sect1 id="question">
   <title><funcsynopsis>bool question(string)</funcsynopsis></title>
   Show Yes/No question and wait for answer. Return true if user selected "yes", or false if user selected "no"
  </sect1>
  <sect1 id="closeFile">
   <title><funcsynopsis>bool closeFile(bool askSave,bool onlyAsk)</funcsynopsis></title>
   Closes file opened in this editor window.
   if askSave is true, user is asked to save the file if it is modified.
   if onlyAsk is true, file is not actually closed, only user is asked if he want to save work (if not specified, defaults to false).
   returns true in case of success, or false if user decide not to close current document and keep it open.
  </sect1>
  <sect1 id="modified">
   <title><funcsynopsis>bool modified()</funcsynopsis></title>
   Return true if the document was modified since it was opened or last saved, false otherwise.
  </sect1>
  <sect1 id="exists">
   <title><funcsynopsis>bool exists(string filename)</funcsynopsis></title>
   Return true if given file exists on disk, false otherwise
  </sect1>
  <sect1 id="openFile">
   <title><funcsynopsis>void openFile(string filename)</funcsynopsis></title>
   Opens file with given name in this editor window.
   Opens without any questions, does not ask user to save changes to current file, etc ...
  </sect1>
  <sect1 id="openFileNew">
   <title><funcsynopsis>void openFileNew(string filename)</funcsynopsis></title>
   Opens file with given name in new editor window
  </sect1>
  <sect1 id="exitApp">
   <title><funcsynopsis>void exitApp()</funcsynopsis></title>
   Terminates application
  </sect1>
  <sect1 id="popupMenu">
   <title><funcsynopsis>Menu popupMenu(string menuName)</funcsynopsis></title>
   Create and return a <link linkend="type_Menu">Menu</link> object. The menuName parameter specifies
   name of item or list from configuration, that will be used to initially fill the menu with items.
   If this parameter is not specified or invalid, the menu will be initially empty.
   See documentation for <link linkend="type_Menu">Menu</link> object type for more info about
   using popup menus.
  </sect1>
  <sect1 id="closeWindow">
   <title><funcsynopsis>void closeWindow()</funcsynopsis></title>
   Closes current editor window.
   If the file is not saved, user is asked to save changes to current file.
  </sect1>
  <sect1 id="print">
   <title><funcsynopsis>void print(string)</funcsynopsis></title>
   Outputs given string to command window, followed by newline.
   Useful to output various debugging or status messages
  </sect1>
  <sect1 id="warn">
   <title><funcsynopsis>void warn(string)</funcsynopsis></title>
   Outputs given warning string to command window, followed by newline,
   and show this string in a messagebox to alert user.
  </sect1>
  <sect1 id="objects">
   <title><funcsynopsis>void objects()</funcsynopsis></title>
   Debugging function usable by script developers.
   Print all objects that are in current script interpreter to command window
  </sect1>
  <sect1 id="functions">
   <title><funcsynopsis>void functions()</funcsynopsis></title>
   Debugging function usable by script developers.
   Print all functions that are in current script interpreter to command window
  </sect1>
  <sect1 id="variables">
   <title><funcsynopsis>void variables()</funcsynopsis></title>
   Debugging function usable by script developers.
   Print all variables that are in current script interpreter to command window
  </sect1>
  <sect1 id="saveWindowState">
   <title><funcsynopsis>void saveWindowState()</funcsynopsis></title>
   Save state of current editor window (size and position of window and elements inside it)
   State is saved to editor's configuration file.
  </sect1>
  <sect1 id="restoreWindowState">
   <title><funcsynopsis>void restoreWindowState()</funcsynopsis></title>
   Restore state of current editor window (size and position of window and elements inside it)
   State is restored from state saved in editor's configuration file.   
  </sect1>
  <sect1 id="version">
   <title><funcsynopsis>string version()</funcsynopsis></title>
   Return version of editor (in format 'major.minor.release')
  </sect1>
  <sect1 id="filename">
   <title><funcsynopsis>string filename()</funcsynopsis></title>
   Return name of file loaded in editor window. If the file does not exist on disk
   (not loaded any file, or file was never saved, having no name), empty string is returned.
  </sect1>
  <sect1 id="save">
   <title><funcsynopsis>int save()</funcsynopsis></title>
   Save currently edited document.
   If current document have no name, user will be asked for name.
   If it is not possible to ask user or user presses cancel in file chooser,
   document is not saved.
   Return true if document was saved, false if it was not saved for any reason (file write error, user refused to give filename on new file ...)
  </sect1>
  <sect1 id="saveAs">
   <title><funcsynopsis>int saveAs(string)</funcsynopsis></title>
   Save currently edited document under different name.
   Also updates the name of file in editor to the one specified.
   Return true if document was saved, false if it failed to save for any reason
  </sect1>
  <sect1 id="fileOpenDialog">
   <title><funcsynopsis>string fileOpenDialog()</funcsynopsis></title>
   Invokes "open file" dialog and return selected filename, or NULL if dialog was cancelled
  </sect1>
  <sect1 id="fileSaveDialog">
   <title><funcsynopsis>string fileSaveDialog(string oldName)</funcsynopsis></title>
   Invokes "save file" dialog and return selected filename, or NULL if dialog was cancelled.
   If file selected in dialog already exists, user is asked to confirm overwriting before returing its name.
  </sect1>
 </chapter>
 <chapter>
  <title>Callback functions</title>
  <para>
   These are functions called from editor on certain events. All callback function
   are called without any parameters and return value (if any) is ignored.
   If the callback function does not exist, it is skipped
  </para>
  <sect1 id="onLoad">
   <title>onLoad()</title>
   <para>
    This function is called after document is opened
   </para>
  </sect1>
  <sect1 id="onLoadUser">
   <title>onLoadUser()</title>
   <para>
    This function is called after document is opened (after <link linkend="onLoad">onLoad()</link> is called)
   </para>
  </sect1>
  <sect1 id="onTreeLeftClick">
   <title>onTreeLeftClick()</title>
   <para>
    This function is called after clicking with left mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
  <sect1 id="onTreeRightClick">
   <title>onTreeRightClick()</title>
   <para>
    This function is called after clicking with right mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
  <sect1 id="onTreeMiddleClick">
   <title>onTreeMiddleClick()</title>
   <para>
    This function is called after clicking with middle mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
  <sect1 id="onTreeDoubleClick">
   <title>onTreeDoubleClick()</title>
   <para>
    This function is called after doubleclicking with left mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
 </chapter>
 <chapter>
  <title>Objects exported to scripting</title>
  <sect1 id="settings">
   <title>settings</title>
   <para>
    This object hold application settings and can be used to read or write them.
   </para>
   <sect2 id="settings.read">
    <title><funcsynopsis>string settings.read(string key,string default=NULL)</funcsynopsis></title>
    Returns application setting with given key.
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case NULL will be returned.
   </sect2>
   <sect2 id="settings.readBool">
    <title><funcsynopsis>bool settings.readBool(string key,bool default=false)</funcsynopsis></title>
    Returns application setting with given key - treating it as boolean value.
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case false will be returned.
   </sect2>
   <sect2 id="settings.readExpand">
    <title><funcsynopsis>string settings.readExpand(string key,string default=NULL)</funcsynopsis></title>
    Returns application setting with given key. Environment variable references are expanded (see <link linkend="settings.expand">expand</link>).
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case NULL will be returned.
   </sect2>
   <sect2 id="settings.expand">
    <title><funcsynopsis>string settings.expand(string)</funcsynopsis></title>
    Return string with environment variable references (in form $VARIABLE and ${VARIABLE}) 
    Any character preceded as backslash (especially $ character) is not processed in expansion.
   </sect2>
   <sect2 id="settings.write">
    <title><funcsynopsis>string settings.write(string key,string value)</funcsynopsis></title>
    Write application setting with given key and value
   </sect2>
   <sect2 id="settings.remove">
    <title><funcsynopsis>string settings.remove(string key)</funcsynopsis></title>
    Remove key from user settings, effectively restoring the setting to its default value
   </sect2>
   <sect2 id="settings.flushSettings">
    <title><funcsynopsis>void settings.flushSettings()</funcsynopsis></title>
    Write all unsaved settings to disk. Unsaved settings are automatically writen
    to disk on application exit, but this can flush them to disk explicitly.
   </sect2>
  </sect1>
 </chapter>
 <chapter>
  <title>Document-related objects bound to scripting</title>
  <para>
  These objects are set to reflect current items from edited document
  Contents of these objects may (and often will) change or be deleted between returning from script and invoking another script.
  Script should not store these objects between runs.
  </para>
  <sect1 id="item">
   <title>item</title>
   <para>
    This object represents currently selected object in property editor.
   </para>
   <para>
    Available function of this object depend on type of currently selected object.
    Script may want to check type of this object before manipulating with it as
    various object types support different set of operations on them.
   </para>
   <para>
    Types for this object can be <link linkend="type_IProperty">IProperty</link> or any of its descendants
    (<link linkend="type_Dict">Dict</link>, <link linkend="type_Array">Array</link>)
    You can use type() function to return name of the object's type (as string).
   </para>
  </sect1>
  <sect1 id="document">
   <title>document</title>
   <para>
   This object represents currently edited PDF document. Type of this object is <link linkend="type_Pdf">Pdf</link>
   </para>
  </sect1>
  <sect1 id="treeitem">
   <title>treeitem</title>
   <para>
   This object represents currently selected/clicked item in tree window. Type of this object is <link linkend="type_TreeItem">TreeItem</link>
   </para>
   <para>
    You will probably want to use the <link linkend="TreeItem.item">item()</link> method to retrieve the actual object within.
   </para>
  </sect1>
  <sect1 id="page">
   <title>page</title>
   <para>
   This object represents currently selected page. Type of this object is <link linkend="type_Page">Page</link>
   </para>
  </sect1>
 </chapter>
 <chapter>
  <title>Object types (common and PDF objects)</title>
<!--TYPE: qscobject.h -->
<!--TYPE: qsdict.h -->
<!--TYPE: qsarray.h -->
<!--TYPE: qspage.h -->
<!--TYPE: qscontentstream.h -->
<!--TYPE: qsiproperty.h -->
<!--TYPE: qspdf.h -->
 </chapter>
 <chapter>
  <title>Object types (GUI objects)</title>
  <para>
   These object types do not have direct corespondence to any object inside PDF document,
   but some of them may allow you to manipulate them indirectly.
   Main focus of these types is to interact with user.
  </para>
<!--TYPE: qstreeitem.h -->
<!--TYPE: qsmenu.h -->
 </chapter>
</book>
