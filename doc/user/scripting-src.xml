<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
 <bookinfo>
  <title>Documentation for PDF Editor - Scripting</title>
 </bookinfo>
 <chapter>
  <title>Scripting in PDFEditor</title>
  <para>
   PDFEditor have support for scripting. Evey item in menu (or toolbar) runs a script
   (mostly just short call of function, but using complex scripts form menu
   is possible), and also user can type script commands directly into
   commandline. Every invocation of script from menu will echo the command
   to the commandline, so user can learn how to do things in menu directly
   from commandline if he wants.
  </para>
  <para>
   QSA is used for scripting, which is based on ECMAScript standard
   (if you don't know what ECMAScript is, it is basically the same
    syntax as JavaScript)
  </para>
  <para>
   When new editor window is launched (but before the document is loaded or created),
   file <filename>init.qs</filename><footnote>This can be changed to different filename in settings</footnote> is run. This file should contain declaration of all
   functions used in toolbars or menus and may also contain any startup code to be run
   before loading or creating new document.
  </para>
  <para>
   This documentation will not explain the language syntax, but will document
   all functions and objects that are exported from the application to the
   scripting engine so they may be used in scripts and menus.
  </para>
  <para>
   <note>Scripts are not "secure" by design, as the API contain functions to read or write
   arbitrary files and directories and to execute external processes.
   See http://doc.trolltech.com/qsa-1.1.4/extensions-2.html for description
   of File, Dir and Process classes, which are available to script.</note>
  </para>
 </chapter>
 <chapter>
  <title>Static functions</title>
<!--BASETYPE: base.h -->
 </chapter>
 <chapter>
  <title>Callback functions</title>
  <para>
   These are functions called from editor on certain events. All callback function
   are called without any parameters and return value (if any) is ignored.
   If the callback function does not exist, it is skipped
  </para>
  <sect1 id="onChangeRevision">
   <title>onChangeRevision()</title>
   <para>
    This function is called after active revision of document is changed
   </para>
  </sect1>
  <sect1 id="onDragDrop">
   <title>onDragDrop()</title>
   <para>
   Called on drag-drop event in one tree window.
   Variable <link linkend="source">source</link> contain source (dragged) tree item,
   variable <link linkend="target">target</link> contain destination item on which the source was dropped.
   </para>
  </sect1>
  <sect1 id="onDragDropOther">
   <title>onDragDropOther()</title>
   <para>
   Called on drag-drop event across different tree windows.
   Variable <link linkend="source">source</link> contain contents of source (dragged) tree item,
   variable <link linkend="target">target</link> contain destination item on which the source was dropped.
   </para>
  </sect1>
  <sect1 id="onLoad">
   <title>onLoad()</title>
   <para>
    This function is called after document is opened
   </para>
  </sect1>
  <sect1 id="onLoadUser">
   <title>onLoadUser()</title>
   <para>
    This function is called after document is opened (after <link linkend="onLoad">onLoad()</link> is called)
   </para>
  </sect1>
  <sect1 id="onPageRightClick">
   <title>onPageRightClick()</title>
   <para>
    This function is called after clicking with right mouse button in window with page preview.
   </para>
  </sect1>
  <sect1 id="onTreeLeftClick">
   <title>onTreeLeftClick()</title>
   <para>
    This function is called after clicking with left mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
  <sect1 id="onTreeRightClick">
   <title>onTreeRightClick()</title>
   <para>
    This function is called after clicking with right mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
  <sect1 id="onTreeMiddleClick">
   <title>onTreeMiddleClick()</title>
   <para>
    This function is called after clicking with middle mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
  <sect1 id="onTreeDoubleClick">
   <title>onTreeDoubleClick()</title>
   <para>
    This function is called after doubleclicking with left mouse button on any item in tree window.
    Clicked item is stored in variable <link linkend="treeitem">treeitem</link>
   </para>
  </sect1>
 </chapter>
 <chapter>
  <title>Objects exported to scripting</title>
  <sect1 id="settings">
   <title>settings</title>
   <para>
    This object hold application settings and can be used to read or write them.
   </para>
   <sect2 id="settings.read">
    <title><funcsynopsis>string settings.read(string key,string default=NULL)</funcsynopsis></title>
    Returns application setting with given key.
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case NULL will be returned.
   </sect2>
   <sect2 id="settings.readBool">
    <title><funcsynopsis>bool settings.readBool(string key,bool default=false)</funcsynopsis></title>
    Returns application setting with given key - treating it as boolean value.
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case false will be returned.
   </sect2>
   <sect2 id="settings.readExpand">
    <title><funcsynopsis>string settings.readExpand(string key,string default=NULL)</funcsynopsis></title>
    Returns application setting with given key. Environment variable references are expanded (see <link linkend="settings.expand">expand</link>).
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case NULL will be returned.
   </sect2>
   <sect2 id="settings.expand">
    <title><funcsynopsis>string settings.expand(string)</funcsynopsis></title>
    Return string with environment variable references (in form $VARIABLE and ${VARIABLE}) 
    Any character preceded as backslash (especially $ character) is not processed in expansion.
   </sect2>
   <sect2 id="settings.write">
    <title><funcsynopsis>string settings.write(string key,string value)</funcsynopsis></title>
    Write application setting with given key and value
   </sect2>
   <sect2 id="settings.remove">
    <title><funcsynopsis>string settings.remove(string key)</funcsynopsis></title>
    Remove key from user settings, effectively restoring the setting to its default value
   </sect2>
   <sect2 id="settings.flushSettings">
    <title><funcsynopsis>void settings.flushSettings()</funcsynopsis></title>
    Write all unsaved settings to disk. Unsaved settings are automatically writen
    to disk on application exit, but this can flush them to disk explicitly.
   </sect2>
  </sect1>
 </chapter>
 <chapter>
  <title>Document-related objects bound to scripting</title>
  <para>
  These objects are set to reflect current items from edited document
  Contents of these objects may (and often will) change or be deleted between returning from script and invoking another script.
  Script should not store these objects between runs.
  </para>
  <sect1 id="item">
   <title>item</title>
   <para>
    This object represents currently selected object in property editor.
   </para>
   <para>
    Available function of this object depend on type of currently selected object.
    Script may want to check type of this object before manipulating with it as
    various object types support different set of operations on them.
   </para>
   <para>
    Types for this object can be <link linkend="type_IProperty">IProperty</link> or any of its descendants
    (<link linkend="type_Dict">Dict</link>, <link linkend="type_Array">Array</link>)
    You can use type() function to return name of the object's type (as string).
   </para>
  </sect1>
  <sect1 id="document">
   <title>document</title>
   <para>
   This object represents currently edited PDF document. Type of this object is <link linkend="type_Pdf">Pdf</link>
   </para>
  </sect1>
  <sect1 id="treeitem">
   <title>treeitem</title>
   <para>
   This object represents currently selected/clicked item in tree window. Type of this object is <link linkend="type_TreeItem">TreeItem</link>
   </para>
   <para>
    You will probably want to use the <link linkend="TreeItem.item">item()</link> method to retrieve the actual object within.
   </para>
  </sect1>
  <sect1 id="page">
   <title>page</title>
   <para>
   This object represents currently shown page. Type of this object is <link linkend="type_Page">Page</link>
   </para>
  </sect1>
  <sect1 id="target">
   <title>target</title>
   <para>
   This object represents target item on which another item was dragged.
   Type of this object is <link linkend="type_TreeItem">TreeItem</link>
   </para>
  </sect1>
  <sect1 id="source">
   <title>source</title>
   <para>
   This object represents source item that was dragged from one tree window to other item in same or different
   tree window. Type of this object is either <link linkend="type_TreeItem">TreeItem</link> for items from same tree window,
   from other tree windows it can be <link linkend="type_IProperty">IProperty</link> or  <link linkend="type_Page">Page</link>
   (the item inside dragged tree item).
   </para>
  </sect1>
 </chapter>
 <chapter>
  <title>Object types (common and PDF objects)</title>
<!--TYPE: qsarray.h -->
<!--TYPE: qscobject.h -->
<!--TYPE: qscontentstream.h -->
<!--TYPE: qsdict.h -->
<!--TYPE: qsiproperty.h -->
<!--TYPE: qspdf.h -->
<!--TYPE: qspdfoperator.h -->
<!--TYPE: qspage.h -->
<!--TYPE: qsstream.h -->
 </chapter>
 <chapter>
  <title>Object types (GUI objects)</title>
  <para>
   These object types do not have direct corespondence to any object inside PDF document,
   but some of them may allow you to manipulate them indirectly.
   Main focus of these types is to interact with user.
  </para>
<!--TYPE: qstreeitem.h -->
<!--TYPE: qsmenu.h -->
 </chapter>
</book>
