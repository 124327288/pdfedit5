<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
 <bookinfo>
  <title>Documentation for PDF Editor - Scripting</title>
 </bookinfo>
 <chapter id="intro">
  <title>Introduction</title>
  <para>
   PDFEditor have support for scripting. Evey item in menu (or toolbar) runs a script
   (mostly just short call of function, but using complex scripts from menu
   is possible), and also user can type script commands directly into
   commandline. Every invocation of script from menu will echo the command
   to the commandline, so user can learn how to do things in menu directly
   from commandline if he wants.
  </para>
  <para>
   QSA is used for scripting, which is based on ECMAScript standard
   (if you don't know what ECMAScript is, it is basically the same
    syntax as JavaScript)
  </para>
  <para>
   This documentation will not explain the language syntax, but will document
   all functions and objects that are exported from the application to the
   scripting engine so they may be used in scripts and menus.
   Also how the scripting work in general and how it can be configured will be explained.
  </para>
  <para>
   <note>Scripts are not "secure" by design, as the API contain functions to read or write
   arbitrary files and directories and to execute external processes.
   See http://doc.trolltech.com/qsa-1.1.4/extensions-2.html for description
   of File, Dir and Process classes, which are available to script.</note>
  </para>
 </chapter>
 <chapter id="startup">
  <title>Startup scripts</title>
  <para>
   When new editor window is launched (but before the document is loaded or created),
   file <filename>init.qs</filename> from application's data directory is run, then
   file <filename>userinit.qs</filename> from users's application configuration
   directory (which is <filename>$HOME/.pdfedit</filename>) is run, if it exists
   <footnote id="note_default_files">
    <para>
     This is in default configuration and it can be changed by user to different
     filename(s) in settings
    </para>
   </footnote>
   .
   These files should contain declaration of all functions used in toolbars
   or menus and may also contain any startup code to be run
   before loading or creating new document.
  </para>
  <para>
   In commandline mode, file <filename>init_console.qs</filename> from application's data
   directory is run instead, then file <filename>userinit_console.qs</filename> from users's
   application configuration directory (which is <filename>$HOME/.pdfedit</filename>)
   is run, if it exists <footnoteref linkend='note_default_files'/>
  </para>
  <para>
   After running these init scripts, any "plugin" scripts from directories specified
   in configuration are run.
   By default, these directories are:
   <orderedlist>
    <listitem><para>Directory <filename>scripts</filename> in application's data directory</para></listitem>
    <listitem><para>Directory <filename>scripts</filename> in application's binary directory</para></listitem>
    <listitem><para>Directory <filename>./pdfedit/scripts</filename> in user's home directory</para></listitem>
   </orderedlist>
   For "plugin scripts" in commandline mode, scripts are searched in <filename>console</filename>
   subdirectory of above directories instead.
  </para>
  <para>
   Scripts are run in alphabetical order (by their filename, case sensitive)
   and if the same script is encountered in more than one directory,
   only the one in directory later in list is executed.
   This ensures that if user install newer version of some script in his home directory,
   only his version will get executed.
  </para>
  <para>
   After that, the document is loaded (if it was not specified on commandline,
   the window will be initially empty without any document)   
  </para>
 </chapter>
 <chapter id="static_common">
  <title>Static functions common for GUI and command line</title>
<!--BASETYPE: base.h -->
 </chapter>
 <chapter id="static_gui">
  <title>Static functions in GUI</title>
<!--BASETYPE: basegui.h -->
 </chapter>
 <chapter id="static_cmdline">
  <title>Static functions in command line</title>
<!--BASETYPE: baseconsole.h -->
 </chapter>
 <chapter id="callbacks">
  <title>Callback functions</title>
  <para>
   These are functions called from editor on certain events.
   Return value (if any) is ignored.
   If the callback function does not exist, it is skipped
  </para>
  <sect1 id="onChangeRevision">
   <title>onChangeRevision()</title>
   <para>
    This function is called after active revision of document is changed
   </para>
  </sect1>
  <sect1 id="onConsoleStart">
   <title>onConsoleStart()</title>
   <para>
    This function is called in commandline mode after calling all scripts specified
    in commanline parameters -
    unless some of the scripts exit the application prematurely, for example
    by calling <link linkend="exit">exit()</link>.
   </para>
  </sect1>
  <sect1 id="onLoad">
   <title>onLoad()</title>
   <para>
    This function is called after document is opened
   </para>
  </sect1>
  <sect1 id="onLoadUser">
   <title>onLoadUser()</title>
   <para>
    This function is called after document is opened (after <link linkend="onLoad">onLoad()</link> is called)
   </para>
  </sect1>
  <sect1 id="onLoadError">
   <title>onLoadError()</title>
   <para>
    This function is called after an error occured while trying to load a document
   </para>
  </sect1>
  <sect1 id="onPageRightClick">
   <title>onPageRightClick()</title>
   <para>
    This function is called after clicking with right mouse button in window with page preview.
   </para>
  </sect1>
  <sect1 id="onTreeLeftClick">
   <title>onTreeLeftClick()</title>
   <para>
    This function is called after clicking with left mouse button on any item in tree window.
   </para>
  </sect1>
  <sect1 id="onTreeRightClick">
   <title>onTreeRightClick()</title>
   <para>
    This function is called after clicking with right mouse button on any item in tree window.
   </para>
  </sect1>
  <sect1 id="onTreeMiddleClick">
   <title>onTreeMiddleClick()</title>
   <para>
    This function is called after clicking with middle mouse button on any item in tree window.
   </para>
  </sect1>
  <sect1 id="onTreeDoubleClick">
   <title>onTreeDoubleClick()</title>
   <para>
    This function is called after doubleclicking with left mouse button on any item in tree window.
   </para>
  </sect1>
  <sect1 id="onTreeSelectionChange">
   <title>onTreeSelectionChange()</title>
   <para>
    This function is called after selection in tree changes.
   </para>
  </sect1>
  <sect1 id="onValueChange">
   <title>onValueChange(name)</title>
   <para>
    This function is called after some of special tools change its value because of interaction.
    Parameter is name of the special tool.
    Color selection tool calls this after user select some color in it,
    edit tool calls this after user presses enter or leaves the control,
    number tool calls this after user presses enter or selects some of predefined numbers,
    select tool calls this after changing the selection.
   </para>
  </sect1>
 </chapter>
 <chapter>
  <title>Objects exported to scripting</title>
  <sect1 id="settings">
   <title>settings</title>
   <para>
    This object hold application settings and can be used to read or write them.
   </para>
   <sect2 id="settings.read">
    <title><funcsynopsis>string settings.read(string key,string default=NULL)</funcsynopsis></title>
    Returns application setting with given key.
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case NULL will be returned.
   </sect2>
   <sect2 id="settings.readBool">
    <title><funcsynopsis>bool settings.readBool(string key,bool default=false)</funcsynopsis></title>
    Returns application setting with given key - treating it as boolean value.
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case false will be returned.
   </sect2>
   <sect2 id="settings.readExpand">
    <title><funcsynopsis>string settings.readExpand(string key,string default=NULL)</funcsynopsis></title>
    Returns application setting with given key. Environment variable references are expanded (see <link linkend="settings.expand">expand</link>).
    The parameter default specify default value returned when the setting does not exist.
    It can be omitted, in that case NULL will be returned.
   </sect2>
   <sect2 id="settings.expand">
    <title><funcsynopsis>string settings.expand(string)</funcsynopsis></title>
    Return string with environment variable references (in form $VARIABLE and ${VARIABLE}) 
    Any character preceded with backslash (especially $ character) is not processed in expansion.
    <note>
     Some internal variables (all of them beginning with $PDFEDIT_) can override corresponding environment variables.
     This function will use the internal variable in expansion if both internal and environment variables exist.
    </note>
    <table frame="none">
     <title>List of internal variables</title>
     <tgroup cols="2"><tbody>
      <row>
       <entry>$PDFEDIT_BIN</entry>
       <entry>Full path to directory in which the binary file resides</entry>
      </row>
      <row>
       <entry>$PDFEDIT_DATA</entry>
       <entry>
        Full path to directory with editor data files - usually something like
        <filename>/usr/share/pdfedit</filename> or <filename>/usr/local/share/pdfedit</filename>
        unless configured diferently when building editor.
       </entry>
      </row>
     </tbody></tgroup>
    </table>
   </sect2>
   <sect2 id="settings.write">
    <title><funcsynopsis>string settings.write(string key,string value)</funcsynopsis></title>
    Write application setting with given key and value
   </sect2>
   <sect2 id="settings.remove">
    <title><funcsynopsis>string settings.remove(string key)</funcsynopsis></title>
    Remove key from user settings, effectively restoring the setting to its default value
   </sect2>
   <sect2 id="settings.flush">
    <title><funcsynopsis>void settings.flush()</funcsynopsis></title>
    Write all unsaved settings to disk. Unsaved settings are automatically writen
    to disk on application exit, but this can flush them to disk explicitly.
   </sect2>
  </sect1>
 </chapter>
 <chapter>
  <title>Document-related objects in scripting</title>
  <para>
  These objects are set to reflect currently edited document
  </para>
  <sect1 id="document">
   <title>document</title>
   <para>
    This object represents currently edited PDF document.
    Type of this object is <link linkend="type_Pdf">Pdf</link>
   </para>
  </sect1>
 </chapter>
 <chapter>
  <title>Object types (common and PDF objects)</title>
<!--TYPE: qsannotation.h -->
<!--TYPE: qsarray.h -->
<!--TYPE: qscobject.h -->
<!--TYPE: qscontentstream.h -->
<!--TYPE: qsdict.h -->
<!--TYPE: qsiproperty.h -->
<!--TYPE: qsipropertyarray.h -->
<!--TYPE: qspage.h -->
<!--TYPE: qspdf.h -->
<!--TYPE: qspdfoperator.h -->
<!--TYPE: qspdfoperatoriterator.h -->
<!--TYPE: qspdfoperatorstack.h -->
<!--TYPE: qsstream.h -->
 </chapter>
 <chapter>
  <title>Object types (GUI objects)</title>
  <para>
   These object types do not have direct corespondence to any object inside PDF document,
   but some of them may allow you to manipulate them indirectly.
   Main focus of these types is to interact with user.
  </para>
<!--TYPE: qsmenu.h -->
<!--TYPE: qstreeitem.h -->
<!--TYPE: qstreeitemcontentstream.h -->
 </chapter>
</book>
