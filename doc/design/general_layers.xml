<!-- vim:tabstop=4:shiftwidth=4:noexpandtab:textwidth=80 
-->
<chapter id="general_layers_ch">
	<title>PDFedit layers</title>
	<para>
		PDFEdit project is based on 3 layers model:
		<mediaobject>
		  <imageobject align="center">
			  <imagedata fileref="images/layers.png" format="PNG"/>
		  </imageobject>
		  <caption><para>PDFedit layers</para></caption>
		</mediaobject>

		<itemizedlist>
		<listitem>Kernel - which has responsibility to maintain pdf
			document content and provides with interface for
			changes.
		</listitem>
		<listitem>Script - which has responsibility to wrap kernel 
			interface and export it to user or gui.
		</listitem>
		<listitem>Gui - which visualize and makes comfortable usage of 
			all the functionality which is accessible directly from 
			kernel or Script layers.
		</listitem>
		</itemizedlist>
	</para>
	<para>
		Kernel layer is build on top of popular open source &xpdf_link_index; 
		project. 
		It reuses xpdf code for low-level pdf document access - reading 
		and decoding content and parsing it to objects as well as 
		displaying functionality. Xpdf objects are transformed to 
		interface internal pdfedit obejcts which provides additional
		logic and as such they are exported to higher layers.
	</para>
	<para> 
		Script layer is base on &qsa_link_index; - Qt script for applications - 
		developed by Trolltech. 
	</para>
	<para>
		Gui layer uses &qt_link_index; framework also developed by Trolltech. 
		Most of gui parts are based on scripts. This means that user interface 
		is very flexible and changes are possible without need of code
		recompilation or they can be done in runtime.
	</para>
	<para>
		This chapter describes PDFedit layers, their comunication interface and
		responsibilities.
	</para>
	<sect1 id="general_kernel_layer">
		<title>Kernel layer</title>
		<para>
			Kernel, as the lowest layer, is responsible to maintain pdf content from
			file and to	provide object interface for making changes to higher layer. 
			We will call this objects as <emphasis>cobjects</emphasis>. More 
			precisely - highlevel cobjects (CPdf, CPage, etc.) which provide higher 
			pdf entities logic and lowlevel cobjects which are pdf data types carrier 
			(CInt, CArray, CDict, CString, etc.). Values stored in lowlevel cobjects
			are also called properties and they are wrapped by IProperty class.
			Properties are identified by indirect reference (the way how pdf
			adresses entities).
			User of kernel should start with CPdf instance which provides all
			properties from document as well as access to document pages or
			outlines. Pages then provide access to Annotations. All cobjects are
			returned wrapped by shared_ptr (see <xref linkend="general_techn"/>).
		</para>
		<para>
			Kernel uses &xpdf_link_index; code for document content parsing. 
			XPdf's XRef class provides fetching and parsing functionality. 
			Oposite way (from cobjects to file writing) is provided by IPdfWriter
			implementation. XPdf Stream class is replaced by StreamWriter kernel
			class. 
		</para>
		<para>
			CXRef class inherits from XRef (xpdf class) and adds internals for
			storing of changed objects not public for direct user. XRefWriter
			enables interface for making changes inherited from CXRef. See 
			<xref linkend="kernel_3_layer_model"/> for more information.
		</para>
		<mediaobject>
		  <imageobject>
			  <imagedata fileref="images/kernel.png" format="PNG"/>
		  </imageobject>
		  <caption><para>Kernel architecture</para></caption>
		</mediaobject>
	</sect1>

	<sect1 id="general_scripting_layer">
		<title>Scripting layer</title>
		<para>
			TODO martin
		</para>
	</sect1>
	
	<sect1 id="general_gui_layer">
		<title>Gui layer</title>
		<para>
			TODO martin
		</para>
	</sect1>
</chapter>
