 <!--  
	jmisutka (2006/08/12)
		TODO: 
			o replace <xref linkend.. with real entity definitions
			o add reference to pdfoperatoriterator
-->

<chapter id="pdfoperators_chapter">
  
  <title>Operators</title>
  <para>
      Every page has its content stream which contains the description of every object 
	  on a page. Content stream consists of operators and their operands specifying how to alter
	  graphical state of a page.
	  These operators specify what and how it is displayed. They are processed sequentially.
	  If no content stream is avaliable (or is empty) the approperiate page is empty. 
  </para>
  
 <sect1><title>PdfOperators</title>
  <para>
  Content stream consists of operators and their operands. Operators can be
  either simple or composite objects. The requirement for processing operators sequentially
  and representing operators in human readable form resulted in storing each operator in two queues.
  </para>
  </sect1>

 <sect1><title>Changing pdf operators</title>
 <para>
  Changing the visible object properties means wrap those objects into other objects. Object can depend on previous
  objects. We need to be able to iterate backwards.
  Summarizing these requirements with human readable representation of operators leads to these decisions: 
	<itemizedlist mark="circle">
	<listitem><para>sequentially processing the list, the order has to be the same as in the file we edit - 
	Iterator design pattern<xref linkend="iterator" /></para>
	</listitem>
	<listitem><para>grouping and wrapping operators - Component design pattern<xref linkend="component" /> and 
	specific Decorator design pattern<xref linkend="decorator" /></para>
	</listitem>
	</itemizedlist>
	The first requirement is needed when simulating the display process of an pdf viewer (e.g. when 
	finding out the absolute position of an operator). The Component design pattern <xref linkend="component" /> used in 
	representation of pdf operators
	is very useful, when changing objects (e.g. changing an existing text object to composite is very easy allowing us to 
	add some special formatting). This becomes very useful with the Decorator design pattern<xref linkend="decorator" />
	which allows us to change this object in conjuction with previous changes.
	
	<mediaobject>
	  <imageobject>
	   <imagedata fileref="images/pdfoperators.png" format="PNG"/>
	  </imageobject>
	  <textobject><phrase>Operator overview</phrase></textobject>
	  <caption><para>Operator overview</para></caption>
	</mediaobject>
  </para>
  </sect1>
  
  <sect1><title>Grouping operators together</title>
  <para>Operators are stored in a tree like structure. CContentStream contains container of
  operators. These operators are either components or leafs of a tree like structure. Leaf and
  non leaf objects implement the same functions, but the output is different. 
  </para>
  </sect1>
  
  <sect1><title>Traversing operators</title>
  <para>
  See pdfoperatoriterator.
  </para>
  </sect1>

 </chapter>
