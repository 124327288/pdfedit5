 <!--  
	jmisutka (2006/08/12)
		TODO: 
			o replace <xref linkend.. with real entity definitions
-->

<chapter id="pdfoperatorsiterator_chapter">

    <title>Iterator</title>
    <para>
	Iterator design pattern<xref linkend="iterator" /> allows us to iterate over items. When designed correctly
	specific iterator can be added easily. 
    </para>

	<sect1>
	<title>PdfOperatorIterator</title>
	<para>
	Pdf operator iterator is a bidirectional iterator over PdfOperator objects.
	This iterator is special. The information about next and previous object is stored in the object itself. 
	This iterator works with smart pointers which brings us the problem of dependency cycle and objects would
	not get deallocated. This was solved by introducing another type of smart pointer which can handle this.
	
	It is very similar to a normal bidirectional linked list. The iterator class holds the information whether it is before the 
	beginning, after the end or at a valid item.  
	</para>
	</sect1>
	
	<sect1>
	<title>Extending iterator</title>
	<para>
	Basic iterator class implements one Template method<xref linkend="template_method" />. Specific iterators are created by
	overloading this method. It decides whether an item is valid or not.
	There are two important children of the base iterator class. 
	  <itemizedlist mark="opencircle">
		<listitem><para>AcceptingPdfOperatorIterator class</para></listitem>
		<listitem><para>RejectingPdfOperatorIterator class</para></listitem>
	  </itemizedlist>
	
	These two classes either accept a set or operators or accept everything except those iterators. Extending these classes 
	requires only defining the set of operators. 
  	  
	  <mediaobject>
		  <imageobject>
		   <imagedata fileref="images/pdfoperatoriterator.png" format="PNG"/>
		  </imageobject>
		  <textobject><phrase>Pdf operator iterators overview</phrase></textobject>
		  <caption><para>Pdf operator iterators overview</para></caption>
		</mediaobject>

	</para>
	</sect1>	
	
</chapter>
