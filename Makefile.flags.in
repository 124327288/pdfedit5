E_RELEASE= @enable_release@
QMAKE 	 = @QMAKE@
LRELEASE = @LRELEASE@

# We need to add one level of indirect definition because of qmake which
# uses QMAKE_{CC,CXX,LINK} to define compiler specific stuff, however 
# if we do QMAKE_CC = $(CC) then we will get CC =$(CC) in the result makefile
# which is bad therefore all variables which appears in qmake project file
# must have prefix CONFIG_
CONFIG_CC = @CC@
CONFIG_CXX = @CXX@
CONFIG_LINK = $(CONFIG_CXX)
CC = $(CONFIG_CC)
CXX = $(CONFIG_CXX)
LINK = $(CONFIG_LINK)
# TODO from autoconf
AR       = ar cqs
CONFIG_RANLIB = @RANLIB@
RANLIB = $(CONFIG_RANLIB)
# TODO from autoconf
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
# TODO from autoconf
DEL_FILE = rm -f
# TODO from autoconf
SYMLINK  = ln -sf
# TODO from autoconf
DEL_DIR  = rmdir
DEL_FORCE_DIR = rm -rf
MOVE     = mv -f
# TODO from autoconf
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p
SHELL	 = @SHELL@
DOXYGEN_BIN = @DOXYGEN_BIN@
# TODO from autoconf ?
LIBPREFIX = lib

###########################################
# Installation directories
###########################################

# Installation root directory (empty for / otherwise including trailing slash)
INSTALL_ROOT	= @root_dir@

# extracts values from configure used by others - don't use them directly
# and _always_ use uppercase variants instead!
#
# TODO version must be distinguished between dev and normal package
version		= @PACKAGE_VERSION@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
package_name	= $(PACKAGE_TARNAME)
prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@
bindir		= @bindir@
docdir		= @docdir@
mandir		= @mandir@
datadir		= @datadir@/$(package_name)
libdir		= @libdir@/$(package_name)-$(version)
includedir	= @includedir@/$(package_name)-$(version)

# Our abstraction of configure variables - _always_ use this variables when
# you need to refer configuration
VERSION		= $(version)
PACKAGENAME	= $(package_name)
PREFIX		= $(prefix)
EPREFIX		= $(exec_prefix)
DATA_PATH	= $(datadir)
DOC_PATH	= $(docdir)
MAN_PATH	= $(mandir)/man1
BIN_PATH	= $(bindir)

# this variables are used only for pdfedit-core-dev installation
LIB_PATH	= $(libdir)
INCLUDE_PATH	= $(includedir)


#############################################
# Flags definition
#############################################

# Define MAKEFLAGS only for top level makes as this variable is inherited 
# down in recursion
ifeq ($(MAKELEVEL),0)
MAKEFLAGS += @parallel_make@
endif

# Debug options
DEBUG	 = @DEBUG@
# Optimization options
OPTIM	 = @OPTIM@
# Architecture specific options
# TODO how to find out?
ARCH	 = 
# Warning options
WARN	 = @WARN@ 
# TODO check whether this is ok also for other platforms
C_EXTRA	 = -fmessage-length=0 -D_FORTIFY_SOURCE=2 \
	   -fno-strict-aliasing
# Note that this value will be used also for pdfedit-core-dev CFLAGS
# (so don't put any debug, optimization or architecture specific options here)
CXX_EXTRA = -fmessage-length=0 -D_FORTIFY_SOURCE=2 \
	    -fno-strict-aliasing -fexceptions

#######################################
# Optional C parameters
# Put special parameters here
# In fact we are not using many pure C files, so this will be usually out of your concern
#######################################

EXTRA_UTILS_CFLAGS = 
EXTRA_KERNEL_CFLAGS = 
EXTRA_TESTS_CFLAGS = 


#######################################
# Optional C++ parameters
# Put special parameters here
#######################################

# from autoconf --enable-observer-debug
OBSERVER_CXXFLAGS = @OBSERVER_CXXFLAGS@

EXTRA_UTILS_CXXFLAGS = 
EXTRA_KERNEL_CXXFLAGS = 
EXTRA_TESTS_CXXFLAGS = 
EXTRA_GUI_CXXFLAGS = -D CONFIG_DATA_PATH="$(DATA_PATH)"

# same like for compiler stuff we also define 2 levels 
# CONFIG_{NAME} can be used for qmake direct {NAME} can be used
# for compilation
CONFIG_CFLAGS  	= $(DEBUG) $(OPTIM) $(ARCH) $(WARN) $(C_EXTRA) @STACK_PROTECTOR_FLAGS@ -pipe -posix
CONFIG_CXXFLAGS	= $(DEBUG) $(OPTIM) $(ARCH) $(WARN) $(CXX_EXTRA) $(OBSERVER_CXXFLAGS) @STACK_PROTECTOR_FLAGS@ -pipe -posix

CFLAGS = $(CONFIG_CFLAGS)
CXXFLAGS = $(CONFIG_CXXFLAGS)

#######################################
# Absolute paths for all components
#
# Although this is not optimal (e.g. you may want to move whole tree into other directory), this
# is the simpliest solution I have found. We have only one file with whole configuration and 
# all other Makefiles just need to include it and don't care about including stuff and so on.
# Just look inside xpdf and the way how it includes its files (you don't want to include xpdf
# headers from some deeper directory (like kernel/tests) because you will be drawned with ../).
####################################### 

ROOT		= @abs_builddir@
SRCROOT		= $(ROOT)/src
DOCROOT		= $(ROOT)/doc
XPDFROOT 	= $(SRCROOT)/xpdf
KERNELROOT 	= $(SRCROOT)/kernel
UTILSROOT 	= $(SRCROOT)/utils
TESTSROOT 	= $(SRCROOT)/tests/
KERNELTESTSROOT = $(TESTSROOT)/kernel
GUIROOT		= $(SRCROOT)/gui
OSROOT		= $(SRCROOT)/os
QSA_QT		= @QSA_DIR@
QSAROOT		= $(SRCROOT)/$(QSA_QT)
QOUTPUTDEVROOT  = $(SRCROOT)/kpdf-kde-3.3.2

BOOSTFLAGS 	 = @BOOST_CPPFLAGS@
CPPUNITFLAGS	 = @CPPUNIT_CFLAGS@
FREETYPEFLAGS	 = @FT2_CFLAGS@
T1FLAGS		 = @t1_CFLAGS@
XPDFLAGS 	 = -I$(XPDFROOT)/ 
# This is required for qmake which always forces -I when specifying 
# INCLUDEPATH
QSAPATH		 = $(QSAROOT)/src/qsa
QSAFLAGS	 = -I$(QSAPATH)
QOUTPUTDEVPATH	 = $(QOUTPUTDEVROOT)
QOUTPUTDEVFLAGS  = -I$(QOUTPUTDEVPATH)

# All necessary includes for building
MANDATORY_INCPATH = -I. -I$(SRCROOT) $(XPDFLAGS) $(BOOSTFLAGS)\
		   $(FREETYPEFLAGS) $(T1FLAGS)
# This is required for qmake which always forces -I when specifying 
MANDATORY_PATHS	  = $(SRCROOT) $(XPDFLAGS) $(BOOSTFLAGS) $(FREETYPEFLAGS)

# All necessary includes for 3rd party code depending on pdfedit-core-dev
DIST_INCPATH	 = -I$(INCLUDE_PATH) -I$(INCLUDE_PATH)/xpdf $(BOOSTFLAGS) \
		   $(FREETYPEFLAGS) $(T1FLAGS)

FREETYPE_LIBS    = @FT2_LIBS@
T1_LIBS		 = @t1_LIBS@

BOOST_LIBS 	 = @BOOST_LDFLAGS@
BOOST_IOSTREAMS_LIBS = @BOOST_IOSTREAMS_LIB@

# PDFedit specific libs
CPPUNIT_LIBS	 = @CPPUNIT_LIBS@
QOUTPUTDEV_LIBS	 = -lqoutputdevices -L$(QOUTPUTDEVROOT)/
QSALIB		 = -lqsa_pdfedit -L$(QSAROOT)/lib/
PDFEDIT_LIBS     = -lkernel -L$(KERNELROOT) -lutils -L$(UTILSROOT) \
		   -lxpdf -L$(XPDFROOT)/xpdf -lfofi -L$(XPDFROOT)/fofi \
		   -lGoo -L$(XPDFROOT)/goo -lsplash -L$(XPDFROOT)/splash 
# given from configure parameters
STANDARD_LIBS	 = @LIBS@
STANDARD_LDFLAGS = @LDFLAGS@

# all necessary libraries
MANDATORY_LIBS	 = $(BOOST_LIBS) $(BOOST_IOSTREAMS_LIB) $(PDFEDIT_LIBS) \
		   $(FREETYPE_LIBS) $(T1_LIBS)

# All necessary libraries for 3rd party code depending on pdfedit-core-dev
# TODO change to have only one library containing kernel, utils, xpdf, fofi,
# goo, splash libraries
DIST_LIBS =  $(BOOST_LIBS) $(BOOST_IOSTREAMS_LIB) \
	     -lkernel -L$(LIB_PATH)/kernel -lutils -L$(LIB_PATH)/utils \
	     -lxpdf -L$(LIB_PATH)/xpdf -lfofi -L$(LIB_PATH)/fofi \
	     -lGoo -L$(LIB_PATH)/goo -lsplash -L$(LIB_PATH)/splash \
	     $(FREETYPE_LIBS) $(T1_LIBS)

# all necessary libraries in file with path form (mainly for qmake projects
# to enable dependency on them)
# TODO use more generic library names (LIBPREFIX, suffix according static/
# dynamic library)
MANDATORY_LIB_FILES = $(KERNELROOT)/libkernel.a $(UTILSROOT)/libutils.a \
		      $(XPDFROOT)/xpdf/libxpdf.a $(XPDFROOT)/fofi/libfofi.a \
		      $(XPDFROOT)/goo/libGoo.a $(XPDFROOT)/splash/libsplash.a

########################################
# Compilation targets
########################################

# configure parameter --enable-gui
GUI_TARGET	 = @GUI_TARGET@

# configure parameter --enable-kernel-tests
KERNEL_TESTS_TARGET = @KERNEL_TESTS_TARGET@

# Cumulative target for all possible tests
TEST_TARGETS = $(KERNEL_TESTS_TARGET)

# Target for man pages generation/installation
# These variables are set when --enable-gui is selected
MAN_TARGET	= @MAN_TARGET@
MAN_INSTALL_TARGET = @MAN_INSTALL_TARGET@

# configure parameter --enable-doxygen-doc
DOXYGEN_TARGET	 = @DOXYGEN_TARGET@
DOXYGEN_INSTALL_TARGET = @DOXYGEN_INSTALL_TARGET@

# configure parameter --enable-advanced-doc
ADVANCED_DOC_TARGET = @ADVANCED_TARGET@
ADVANCED_DOC_INSTALL_TARGET = @ADVANCED_INSTALL_TARGET@

# configure parameter --enable-user-manual
USER_MANUAL_TARGET = @USER_MANUAL_TARGET@
USER_MANUAL_INSTALL_TARGET = @USER_MANUAL_INSTALL_TARGET@
